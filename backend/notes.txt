    COMANDOS EM SEQUÊNICA
- yarn init -y => Inicializa o projeto node
- yarn add express => Instala o express;
- yarn add @types/express => types do express;
- yarn add typescript => Node por padrão não interpreta typescript, dessa forma é necessário instalar a dependência typescript;
- yarn tsc --init => Cria o arquivo para configurar a conversão do typescript para o Node interpretar;
    - No arquivo tsconfig.json => altere a linha "target":"es5" para "target":"es2017";
- yarn add ts-node-dev => Para fazer o projeto rodar utilizando typescript, é algo similar ao nodemon, ou seja um comando pra rodar o server, porém com typescript;
    - No arquivo package.json configure a chave "script" para executar os comandos personalizados:
        - "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts"
- yarn add typeorm => Para fazer o node acessar o banco de dados por meio de comandos, similar ao knex;
    - Formas de trabalhar com banco de dados em node => Drive nativo (sqlite3 app), Query Builder (knex), ORM (Object Relational Mapping 
    Cada tabela no DB é uma classe e cada linha de retorno após um SELECT é uma instância dessa classe, ou seja um objeto acessível)
- yarn add sqlite3 => Integração do sqlite3 com node;
- yarn typeorm => cli do typeorm para criar e controlar as migrations com mais facilidade
    - adicone no package.json scripts => "typeorm": "ts-node-dev ./node_modules/typeorm/cli.js"
    - no arquivo ormconfig.json => "migrations": ["./src/database/migrations/*.ts"] => dizendo que todos os arquivs que terminam com .ts na pasta indicada são arquivo
    de migrations
    - no arquivo ormconfig.json => "cli": {"migrationsDir": "./src/database/migrations"} => indicando para o typeorm a pasta onde deve criar as migrations
- yarn typeorm migration:create -n create_orphanages; => cria a migration
- yarn typeorm migration:run => Executa as migrations